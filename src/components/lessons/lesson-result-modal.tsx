"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Lesson } from "@/types";
import {
  Award,
  Brain,
  Clock,
  RotateCcw,
  Target,
  TrendingUp,
  X,
} from "lucide-react";
import { useState } from "react";

interface LessonResultModalProps {
  lesson: Lesson;
  score: number;
  timeSpent: number;
  onClose: () => void;
  onContinue: () => void;
}

export default function LessonResultModal({
  lesson,
  score,
  timeSpent,
  onClose,
  onContinue,
}: LessonResultModalProps) {
  const [showAIFeedback, setShowAIFeedback] = useState(false);

  const getScoreColor = (score: number) => {
    if (score >= 90) return "text-green-600";
    if (score >= 80) return "text-blue-600";
    if (score >= 70) return "text-yellow-600";
    if (score >= 60) return "text-orange-600";
    return "text-red-600";
  };

  const getScoreMessage = (score: number) => {
    if (score >= 90)
      return "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ho√†n th√†nh b√†i h·ªçc m·ªôt c√°ch tuy·ªát v·ªùi!";
    if (score >= 80) return "T·ªët l·∫Øm! B·∫°n ƒë√£ hi·ªÉu r√µ n·ªôi dung b√†i h·ªçc.";
    if (score >= 70) return "Kh√° t·ªët! H√£y √¥n t·∫≠p th√™m ƒë·ªÉ c·∫£i thi·ªán.";
    if (score >= 60) return "ƒê·∫°t y√™u c·∫ßu. H√£y luy·ªán t·∫≠p th√™m ƒë·ªÉ n√¢ng cao.";
    return "C·∫ßn c·∫£i thi·ªán. H√£y √¥n t·∫≠p l·∫°i v√† th·ª≠ l·∫°i.";
  };

  const getScoreEmoji = (score: number) => {
    if (score >= 90) return "üéâ";
    if (score >= 80) return "üëè";
    if (score >= 70) return "üëç";
    if (score >= 60) return "‚úÖ";
    return "üí™";
  };

  // Mock AI feedback based on score and lesson type
  const getAIFeedback = () => {
    const feedbacks = {
      vocab: [
        "B·∫°n c√≥ th·ªÉ c·∫£i thi·ªán b·∫±ng c√°ch h·ªçc th√™m t·ª´ v·ª±ng m·ªõi m·ªói ng√†y.",
        "H√£y th·ª≠ s·ª≠ d·ª•ng flashcards ƒë·ªÉ ghi nh·ªõ t·ª´ v·ª±ng t·ªët h∆°n.",
        "Luy·ªán t·∫≠p ph√°t √¢m c√°c t·ª´ kh√≥ ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng n√≥i.",
      ],
      grammar: [
        "H√£y √¥n t·∫≠p c√°c quy t·∫Øc ng·ªØ ph√°p c∆° b·∫£n tr∆∞·ªõc khi h·ªçc n√¢ng cao.",
        "Luy·ªán t·∫≠p vi·∫øt c√¢u ƒë·ªÉ √°p d·ª•ng ng·ªØ ph√°p v√†o th·ª±c t·∫ø.",
        "ƒê·ªçc nhi·ªÅu ƒë·ªÉ quen v·ªõi c·∫•u tr√∫c c√¢u t·ª± nhi√™n.",
      ],
      listening: [
        "Nghe podcast ho·∫∑c video ti·∫øng Anh m·ªói ng√†y ƒë·ªÉ c·∫£i thi·ªán.",
        "B·∫Øt ƒë·∫ßu v·ªõi t·ªëc ƒë·ªô ch·∫≠m v√† tƒÉng d·∫ßn ƒë·ªô kh√≥.",
        "Luy·ªán t·∫≠p nghe v√† ch√©p ch√≠nh t·∫£ ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng.",
      ],
      speaking: [
        "Luy·ªán t·∫≠p ph√°t √¢m v·ªõi c√°c video h∆∞·ªõng d·∫´n tr√™n YouTube.",
        "N√≥i chuy·ªán v·ªõi ng∆∞·ªùi b·∫£n x·ª© ho·∫∑c s·ª≠ d·ª•ng app luy·ªán n√≥i.",
        "Ghi √¢m gi·ªçng n√≥i c·ªßa m√¨nh ƒë·ªÉ t·ª± ƒë√°nh gi√° v√† c·∫£i thi·ªán.",
      ],
      reading: [
        "ƒê·ªçc c√°c b√†i b√°o ti·∫øng Anh m·ªói ng√†y ƒë·ªÉ m·ªü r·ªông v·ªën t·ª´.",
        "B·∫Øt ƒë·∫ßu v·ªõi c√°c ch·ªß ƒë·ªÅ b·∫°n quan t√¢m ƒë·ªÉ tƒÉng ƒë·ªông l·ª±c.",
        "S·ª≠ d·ª•ng t·ª´ ƒëi·ªÉn ƒë·ªÉ tra nghƒ©a t·ª´ m·ªõi v√† h·ªçc c√°ch s·ª≠ d·ª•ng.",
      ],
      writing: [
        "Vi·∫øt nh·∫≠t k√Ω b·∫±ng ti·∫øng Anh m·ªói ng√†y ƒë·ªÉ luy·ªán t·∫≠p.",
        "Tham gia c√°c di·ªÖn ƒë√†n vi·∫øt ti·∫øng Anh ƒë·ªÉ nh·∫≠n feedback.",
        "ƒê·ªçc nhi·ªÅu ƒë·ªÉ h·ªçc c√°ch di·ªÖn ƒë·∫°t v√† c·∫•u tr√∫c c√¢u.",
      ],
    };

    return feedbacks[lesson.skill as keyof typeof feedbacks] || feedbacks.vocab;
  };

  const getNextLessonSuggestion = () => {
    const suggestions = {
      vocab: "H√£y th·ª≠ b√†i h·ªçc t·ª´ v·ª±ng n√¢ng cao ho·∫∑c h·ªçc v·ªÅ idioms th√¥ng d·ª•ng.",
      grammar:
        "√în l·∫°i th√¨ qu√° kh·ª© ƒë∆°n v√† th·ª≠ b√†i h·ªçc v·ªÅ th√¨ hi·ªán t·∫°i ho√†n th√†nh.",
      listening:
        "Luy·ªán nghe v·ªõi c√°c b√†i h·ªôi tho·∫°i d√†i h∆°n ho·∫∑c tin t·ª©c ti·∫øng Anh.",
      speaking:
        "Th·ª≠ c√°c b√†i h·ªçc v·ªÅ ph√°t √¢m ho·∫∑c luy·ªán n√≥i v·ªÅ c√°c ch·ªß ƒë·ªÅ quen thu·ªôc.",
      reading:
        "ƒê·ªçc c√°c b√†i b√°o v·ªÅ ch·ªß ƒë·ªÅ b·∫°n quan t√¢m ho·∫∑c truy·ªán ng·∫Øn ti·∫øng Anh.",
      writing: "Luy·ªán vi·∫øt ƒëo·∫°n vƒÉn ho·∫∑c email b·∫±ng ti·∫øng Anh.",
    };

    return (
      suggestions[lesson.skill as keyof typeof suggestions] || suggestions.vocab
    );
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">K·∫øt qu·∫£ b√†i h·ªçc</h2>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="h-5 w-5" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Score Display */}
          <div className="text-center">
            <div className="text-6xl mb-4">{getScoreEmoji(score)}</div>
            <div className={`text-4xl font-bold ${getScoreColor(score)} mb-2`}>
              {score}%
            </div>
            <p className="text-lg text-gray-600 mb-4">
              {getScoreMessage(score)}
            </p>

            <div className="flex items-center justify-center gap-6 text-sm text-gray-500">
              <div className="flex items-center gap-1">
                <Clock className="h-4 w-4" />
                <span>{timeSpent} ph√∫t</span>
              </div>
              <div className="flex items-center gap-1">
                <Target className="h-4 w-4" />
                <span>{lesson.questions.length} c√¢u h·ªèi</span>
              </div>
            </div>
          </div>

          {/* Lesson Info */}
          <Card className="p-4 bg-gray-50">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-semibold text-gray-900">{lesson.title}</h3>
                <p className="text-sm text-gray-600">{lesson.description}</p>
              </div>
              <Badge className="bg-blue-100 text-blue-700 border-0">
                {lesson.skill.toUpperCase()}
              </Badge>
            </div>
          </Card>

          {/* AI Feedback */}
          <Card className="p-4 bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200">
            <div className="flex items-center gap-2 mb-3">
              <Brain className="h-5 w-5 text-purple-600" />
              <h3 className="font-semibold text-gray-900">Ph·∫£n h·ªìi t·ª´ AI</h3>
            </div>

            {!showAIFeedback ? (
              <Button
                variant="outline"
                onClick={() => setShowAIFeedback(true)}
                className="w-full border-purple-200 text-purple-700 hover:bg-purple-50">
                <Brain className="h-4 w-4 mr-2" />
                Xem ph·∫£n h·ªìi AI
              </Button>
            ) : (
              <div className="space-y-3">
                <div className="p-3 bg-white rounded-lg">
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>ƒêi·ªÉm m·∫°nh:</strong> B·∫°n ƒë√£ hi·ªÉu ƒë∆∞·ª£c{" "}
                    {Math.floor(score / 10)}/10 kh√°i ni·ªám trong b√†i h·ªçc n√†y.
                  </p>
                  <p className="text-sm text-gray-700">
                    <strong>C·∫ßn c·∫£i thi·ªán:</strong>{" "}
                    {
                      getAIFeedback()[
                        Math.floor(Math.random() * getAIFeedback().length)
                      ]
                    }
                  </p>
                </div>

                <div className="p-3 bg-white rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-2">
                    G·ª£i √Ω b√†i h·ªçc ti·∫øp theo:
                  </h4>
                  <p className="text-sm text-gray-700">
                    {getNextLessonSuggestion()}
                  </p>
                </div>
              </div>
            )}
          </Card>

          {/* Achievement */}
          {score >= 80 && (
            <Card className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200">
              <div className="flex items-center gap-3">
                <Award className="h-8 w-8 text-yellow-600" />
                <div>
                  <h3 className="font-semibold text-gray-900">
                    Th√†nh t√≠ch m·ªõi!
                  </h3>
                  <p className="text-sm text-gray-600">
                    B·∫°n ƒë√£ ho√†n th√†nh b√†i h·ªçc v·ªõi ƒëi·ªÉm s·ªë cao!
                  </p>
                </div>
              </div>
            </Card>
          )}

          {/* Actions */}
          <div className="flex gap-3 pt-4">
            <Button variant="outline" onClick={onClose} className="flex-1">
              <RotateCcw className="h-4 w-4 mr-2" />
              H·ªçc l·∫°i
            </Button>
            <Button
              onClick={onContinue}
              className="flex-1 bg-blue-600 hover:bg-blue-700">
              <TrendingUp className="h-4 w-4 mr-2" />
              Ti·∫øp t·ª•c h·ªçc
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
